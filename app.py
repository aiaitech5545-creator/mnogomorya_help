import os
import sys
import json
import asyncio
from typing import Optional, List
from datetime import datetime, timedelta
from urllib.parse import urlparse, parse_qsl, urlencode, urlunparse

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker, AsyncSession
from sqlalchemy import text

from dateutil import tz
from dotenv import load_dotenv

# Google Sheets
import gspread
from google.oauth2.service_account import Credentials as GCreds

# Google Calendar
from googleapiclient.discovery import build
from google.oauth2.service_account import Credentials as CCreds


# =========================
# Environment & DIAG
# =========================
load_dotenv()

def mask_token(t: str, keep=8):
    if not t:
        return "EMPTY"
    return t[:keep] + "..." + t[-4:] if len(t) > keep + 4 else t

BOT_TOKEN = os.getenv("BOT_TOKEN", "")
DATABASE_URL = os.getenv("DATABASE_URL", "")
BASE_URL = os.getenv("BASE_URL", "")
ADMIN_IDS = {int(x.strip()) for x in os.getenv("ADMIN_IDS", "").split(",") if x.strip()}
TZ_NAME = os.getenv("TZ", "Europe/Stockholm")
SLOT_MINUTES = int(os.getenv("SLOT_MINUTES", "60"))
PRICE_USD = os.getenv("PRICE_USD", "75")
SKIP_AUTO_WEBHOOK = os.getenv("SKIP_AUTO_WEBHOOK", "0") == "1"

# Google Sheets
GSPREAD_SA_JSON = os.getenv("GSPREAD_SERVICE_ACCOUNT_JSON", "")
GSPREAD_SHEET_ID = os.getenv("GSPREAD_SHEET_ID", "")

# Google Calendar
GCAL_SA_JSON = os.getenv("GCAL_SERVICE_ACCOUNT_JSON", GSPREAD_SA_JSON or "")
GCAL_CALENDAR_ID = os.getenv("GCAL_CALENDAR_ID", "primary")

# --- Normalize DATABASE_URL for SQLAlchemy + asyncpg + SSL ---
_raw = DATABASE_URL or ""
if _raw.startswith("postgres://"):
    _raw = _raw.replace("postgres://", "postgresql+asyncpg://", 1)
elif _raw.startswith("postgresql://") and "+asyncpg" not in _raw:
    _raw = _raw.replace("postgresql://", "postgresql+asyncpg://", 1)

# purge old bad params if any
for bad in ("ssl=true", "sslmode=true"):
    if bad in _raw:
        # remove &bad or ?bad
        _raw = _raw.replace("&" + bad, "")
        _raw = _raw.replace("?" + bad, "?")

# ensure sslmode=require
u = urlparse(_raw)
q = dict(parse_qsl(u.query or "", keep_blank_values=True))
valid_modes = {"disable", "allow", "prefer", "require", "verify-ca", "verify-full"}
if "sslmode" not in q or q.get("sslmode") not in valid_modes:
    q["sslmode"] = "require"
DATABASE_URL = urlunparse((u.scheme, u.netloc, u.path, u.params, urlencode(q), u.fragment))

# --- DIAG ---
print("==== DIAG: startup ====")
print("Python:", sys.version)
try:
    import aiogram
    print("Aiogram:", aiogram.__version__)
except Exception:
    print("Aiogram: unknown")
print("BOT_TOKEN:", mask_token(BOT_TOKEN))
print("BASE_URL:", BASE_URL or "EMPTY")
print("DATABASE_URL set:", bool(DATABASE_URL))
try:
    u = urlparse(DATABASE_URL or "")
    q = dict(parse_qsl(u.query or "", keep_blank_values=True))
    ssl_flag = (q.get("ssl") in ("true", "1")) or (q.get("sslmode") in {"require", "verify-ca", "verify-full"})
    print("DB scheme:", u.scheme or "EMPTY")
    print("DB host:", u.hostname or "EMPTY")
    print("DB ssl?", ssl_flag, "| sslmode:", q.get("sslmode"))
except Exception as e:
    print("DIAG urlparse failed:", e)
print("GSPREAD_SHEET_ID set:", bool(GSPREAD_SHEET_ID))
print("GCAL_CALENDAR_ID:", GCAL_CALENDAR_ID)
print("========================")

if not BOT_TOKEN or ":" not in BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–µ–Ω (–≤—Å—Ç–∞–≤—å –∏–∑ @BotFather).")
if not DATABASE_URL:
    raise RuntimeError("DATABASE_URL –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–ø–æ–¥–∫–ª—é—á–∏ PostgreSQL –Ω–∞ Railway).")
# BASE_URL –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç ‚Äî —Ç–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ –Ω–µ —Å—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏


# =========================
# Aiogram & DB setup
# =========================
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

engine = create_async_engine(DATABASE_URL, echo=False, future=True)
Session = async_sessionmaker(engine, expire_on_commit=False, class_=AsyncSession)


# =========================
# Texts
# =========================
WELCOME = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –µ–≥–æ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
    "‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 45 –º–∏–Ω—É—Ç.\n"
    "üí° –°–æ–≤–µ—Ç—É—é –∑–∞—Ä–∞–Ω–µ–µ –ø—Ä–æ–¥—É–º–∞—Ç—å —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–µ–ª –±—ã –æ–±—Å—É–¥–∏—Ç—å.\n"
    f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ ‚Äî ${PRICE_USD}.\n\n"
    "–î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏!"
)


# =========================
# Google Sheets helpers
# =========================
_sheet = None
def get_sheet():
    global _sheet
    if _sheet is None:
        if not GSPREAD_SA_JSON or not GSPREAD_SHEET_ID:
            print("WARN: Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–Ω–µ—Ç GSPREAD_*).")
            raise RuntimeError("Sheets not configured")
        sa_info = json.loads(GSPREAD_SA_JSON)
        scopes = [
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive.readonly",
        ]
        creds = GCreds.from_service_account_info(sa_info, scopes=scopes)
        gc = gspread.authorize(creds)
        sh = gc.open_by_key(GSPREAD_SHEET_ID)
        ws = sh.sheet1
        headers = [
            "timestamp", "tg_id", "tg_username", "name", "phone",
            "ship_type", "position", "experience", "topic",
            "slot_start_local", "slot_end_local", "payment_method", "gcal_event_id"
        ]
        try:
            first = ws.row_values(1)
            if not first:
                ws.append_row(headers)
        except Exception:
            ws.append_row(headers)
        _sheet = ws
    return _sheet


# =========================
# Google Calendar helpers
# =========================
_gcal = None
def get_calendar():
    global _gcal
    if _gcal is None:
        if not GCAL_SA_JSON:
            print("WARN: Google Calendar –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–Ω–µ—Ç GCAL_SERVICE_ACCOUNT_JSON).")
            raise RuntimeError("Calendar not configured")
        sa_info = json.loads(GCAL_SA_JSON)
        scopes = ["https://www.googleapis.com/auth/calendar"]
        creds = CCreds.from_service_account_info(sa_info, scopes=scopes)
        _gcal = build("calendar", "v3", credentials=creds, cache_discovery=False)
    return _gcal

def to_rfc3339(dt_utc: datetime) -> str:
    return dt_utc.replace(tzinfo=tz.UTC).isoformat().replace("+00:00", "Z")

def create_calendar_event_sync(start_utc, end_utc, summary, description):
    try:
        service = get_calendar()
        ev = {
            "summary": summary,
            "description": description,
            "start": {"dateTime": to_rfc3339(start_utc), "timeZone": "UTC"},
            "end": {"dateTime": to_rfc3339(end_utc), "timeZone": "UTC"},
        }
        created = service.events().insert(calendarId=GCAL_CALENDAR_ID, body=ev).execute()
        return created.get("id")
    except Exception as e:
        print("WARN: Calendar insert failed:", e)
        return ""


# =========================
# FSM (form)
# =========================
class Form(StatesGroup):
    name = State()
    tg_username = State()
    phone = State()
    ship_type = State()
    position = State()
    experience = State()
    topic = State()
    waiting_slot = State()
    payment_method = State()


# =========================
# DB utils
# =========================
def human_dt(dt_utc: datetime) -> str:
    tzinfo = tz.gettz(TZ_NAME)
    return dt_utc.astimezone(tzinfo).strftime("%d %b %Y, %H:%M")

async def get_free_slots(session: AsyncSession) -> List[dict]:
    q = text("""
        SELECT id, start_utc, end_utc
        FROM slots
        WHERE is_booked = false AND start_utc > NOW()
        ORDER BY start_utc ASC
        LIMIT 12
    """)
    rows = (await session.execute(q)).mappings().all()
    return [dict(r) for r in rows]

async def reserve_slot(session: AsyncSession, slot_id: int, user_id: int) -> Optional[int]:
    q1 = text("UPDATE slots SET is_booked = true WHERE id = :id AND is_booked = false RETURNING id")
    res = await session.execute(q1, {"id": slot_id})
    row = res.first()
    if not row:
        return None
    q2 = text("""
        INSERT INTO bookings(user_id, slot_id, status, paid)
        VALUES (:uid, :sid, 'requested', false)
        RETURNING id
    """)
    bid = (await session.execute(q2, {"uid": user_id, "sid": slot_id})).scalar_one()
    return bid

async def ensure_user(session: AsyncSession, tg_id: int, username: Optional[str]) -> int:
    q = text("SELECT id FROM users WHERE tg_id = :tg")
    row = (await session.execute(q, {"tg": tg_id})).scalar()
    if row:
        return row
    ins = text("INSERT INTO users(tg_id, username) VALUES (:tg,:un) RETURNING id")
    uid = (await session.execute(ins, {"tg": tg_id, "un": username})).scalar_one()
    return uid


# =========================
# Handlers
# =========================
@dp.message(CommandStart())
async def on_start(m: Message, state: FSMContext):
    async with Session() as s:
        await ensure_user(s, m.from_user.id, m.from_user.username)
        await s.commit()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ù–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="form:start")],
        [InlineKeyboardButton(text="üóì –í—ã–±—Ä–∞—Ç—å —Å–ª–æ—Ç", callback_data="book")],
    ])
    await m.answer(WELCOME, reply_markup=kb)

@dp.callback_query(F.data == "form:start")
async def start_form(cq: CallbackQuery, state: FSMContext):
    await state.set_state(Form.name)
    await cq.message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (—Ç–æ–ª—å–∫–æ –∏–º—è)")
    await cq.answer()

@dp.message(Form.name)
async def form_name(m: Message, state: FSMContext):
    await state.update_data(name=m.text.strip())
    await state.set_state(Form.tg_username)
    await m.answer("–í–∞—à –Ω–∏–∫ –≤ Telegram (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username)?")

@dp.message(Form.tg_username)
async def form_tg(m: Message, state: FSMContext):
    await state.update_data(tg_username=m.text.strip())
    await state.set_state(Form.phone)
    await m.answer("–ù–æ–º–µ—Ä –º–æ–±–∏–ª—å–Ω–æ–≥–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ). –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-'")

@dp.message(Form.phone)
async def form_phone(m: Message, state: FSMContext):
    phone = m.text.strip()
    await state.update_data(phone=None if phone == '-' else phone)
    await state.set_state(Form.ship_type)
    await m.answer("–¢–∏–ø —Å—É–¥–Ω–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?")

@dp.message(Form.ship_type)
async def form_ship(m: Message, state: FSMContext):
    await state.update_data(ship_type=m.text.strip())
    await state.set_state(Form.position)
    await m.answer("–í–∞—à–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å?")

@dp.message(Form.position)
async def form_position(m: Message, state: FSMContext):
    await state.update_data(position=m.text.strip())
    await state.set_state(Form.experience)
    await m.answer("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ (—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç/–º–µ—Å.)?")

@dp.message(Form.experience)
async def form_experience(m: Message, state: FSMContext):
    await state.update_data(experience=m.text.strip())
    await state.set_state(Form.topic)
    await m.answer("–ß—Ç–æ —Ö–æ—Ç–µ–ª–∏ –±—ã –æ–±—Å—É–¥–∏—Ç—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏?")

@dp.message(Form.topic)
async def form_topic(m: Message, state: FSMContext):
    await state.update_data(topic=m.text.strip())
    await state.set_state(Form.waiting_slot)
    await m.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è: /book")

@dp.message(Command("book"))
async def cmd_book(m: Message, state: FSMContext):
    await show_slots(m)

@dp.callback_query(F.data == "book")
async def cb_book(cq: CallbackQuery, state: FSMContext):
    await show_slots(cq.message)
    await cq.answer()

async def show_slots(target: Message):
    async with Session() as s:
        slots = await get_free_slots(s)
    if not slots:
        await target.answer("–°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –ù–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è ‚Äî –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—å—Å—è.")
        return
    rows, row = [], []
    for i, sl in enumerate(slots, start=1):
        text_btn = human_dt(sl["start_utc"]) + f" ({SLOT_MINUTES} –º–∏–Ω)"
        row.append(InlineKeyboardButton(text=text_btn, callback_data=f"slot:{sl['id']}"))
        if i % 2 == 0:
            rows.append(row); row = []
    if row: rows.append(row)
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    await target.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:", reply_markup=kb)

@dp.callback_query(F.data.startswith("slot:"))
async def choose_slot(cq: CallbackQuery, state: FSMContext):
    slot_id = int(cq.data.split(":")[1])
    async with Session() as s:
        uid = await ensure_user(s, cq.from_user.id, cq.from_user.username)
        slot_row = (await s.execute(text("SELECT start_utc, end_utc FROM slots WHERE id=:id"), {"id": slot_id})).first()
        booking_id = await reserve_slot(s, slot_id, uid)
        if not booking_id:
            await cq.answer("–£–≤—ã, —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç.", show_alert=True)
            return
        await s.commit()
    if slot_row:
        start_utc, end_utc = slot_row
        await state.update_data(
            slot_start_local=human_dt(start_utc),
            slot_end_local=human_dt(end_utc),
            slot_start_utc=start_utc,
            slot_end_utc=end_utc
        )
    await state.set_state(Form.payment_method)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üá∑üá∫ –ö–∞—Ä—Ç–æ–π –∏–∑ –†–§", callback_data="pay:ru")],
        [InlineKeyboardButton(text="üåç –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞", callback_data="pay:intl")],
    ])
    await cq.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã (–¥–ª—è —É—á—ë—Ç–∞ –≤ –∑–∞—è–≤–∫–µ):", reply_markup=kb)
    await cq.answer()

@dp.callback_query(F.data.startswith("pay:"))
async def payment_pick(cq: CallbackQuery, state: FSMContext):
    pm = "–ö–∞—Ä—Ç–∞ –†–§" if cq.data.endswith("ru") else "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞"
    data = await state.update_data(payment_method=pm)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ Google Calendar
    gcal_event_id = ""
    try:
        start_utc = data.get("slot_start_utc")
        end_utc = data.get("slot_end_utc")
        if start_utc and end_utc:
            summary = f"–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å {data.get('name')} (@{(data.get('tg_username') or '').lstrip('@')})"
            description = (
                f"–¢–µ–º–∞: {data.get('topic')}\n"
                f"–¢–∏–ø —Å—É–¥–Ω–∞: {data.get('ship_type')}\n"
                f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {data.get('position')}\n"
                f"–û–ø—ã—Ç: {data.get('experience')}\n"
                f"–ö–æ–Ω—Ç–∞–∫—Ç: {data.get('phone') or '-'}\n"
                f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {data.get('payment_method')}"
            )
            loop = asyncio.get_event_loop()
            gcal_event_id = await loop.run_in_executor(
                None, lambda: create_calendar_event_sync(start_utc, end_utc, summary, description)
            )
    except Exception as e:
        print("WARN: Calendar creation failed:", e)
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(admin_id, f"–û—à–∏–±–∫–∞ Google Calendar: {e}")
            except Exception:
                pass

    # –ó–∞–ø–∏—Å—å –≤ Google Sheets
    try:
        ws = get_sheet()
        now = datetime.utcnow().isoformat()
        ws.append_row([
            now,
            str(cq.from_user.id),
            data.get("tg_username") or ("@" + (cq.from_user.username or "")),
            data.get("name"),
            data.get("phone") or "",
            data.get("ship_type"),
            data.get("position"),
            data.get("experience"),
            data.get("topic"),
            data.get("slot_start_local"),
            data.get("slot_end_local"),
            data.get("payment_method"),
            gcal_event_id or ""
        ])
    except Exception as e:
        print("WARN: Sheets append failed:", e)
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(admin_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ Google Sheets: {e}")
            except Exception:
                pass

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω–∫—É (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω–æ)
    summary_msg = (
        "üÜï –ó–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n"
        f"–ò–º—è: <b>{data.get('name')}</b>\n"
        f"TG: {data.get('tg_username')}\n"
        f"–¢–µ–ª: {data.get('phone') or '-'}\n"
        f"–°—É–¥–Ω–æ: {data.get('ship_type')}\n"
        f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {data.get('position')}\n"
        f"–û–ø—ã—Ç: {data.get('experience')}\n"
        f"–¢–µ–º–∞: {data.get('topic')}\n"
        f"–°–ª–æ—Ç: {data.get('slot_start_local')} ‚Äî {data.get('slot_end_local')}\n"
        f"–û–ø–ª–∞—Ç–∞: {data.get('payment_method')}\n"
        f"GCAL: {'—Å–æ–∑–¥–∞–Ω–æ ‚úÖ' if gcal_event_id else '‚Äî'}\n"
    )
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, summary_msg)
        except Exception:
            pass

    await state.clear()
    await cq.message.answer("–°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. üôå")
    await cq.answer()

# Admin
@dp.message(Command("admin"))
async def admin_menu(m: Message):
    if m.from_user.id not in ADMIN_IDS:
        return
    await m.answer(
        "–ê–¥–º–∏–Ω: /addslot YYYY-MM-DD HH:MM ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–µ—Ä—ë—Ç—Å—è –∏–∑ SLOT_MINUTES).\n"
        "–ü—Ä–∏–º–µ—Ä: /addslot 2025-10-25 15:00"
    )

from dateutil import tz as _tz

@dp.message(Command("addslot"))
async def addslot(m: Message):
    if m.from_user.id not in ADMIN_IDS:
        return
    try:
        parts = m.text.split()
        dt_local = datetime.strptime(parts[1] + " " + parts[2], "%Y-%m-%d %H:%M")
        local_tz = _tz.gettz(TZ_NAME)
        dt_local = dt_local.replace(tzinfo=local_tz)
        dt_utc = dt_local.astimezone(_tz.UTC)
        dt_utc_end = dt_utc + timedelta(minutes=SLOT_MINUTES)
    except Exception:
        await m.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /addslot 2025-10-25 15:00")
        return
    async with Session() as s:
        await s.execute(text("INSERT INTO slots(start_utc, end_utc, is_booked) VALUES (:s,:e,false)"),
                        {"s": dt_utc, "e": dt_utc_end})
        await s.commit()
    await m.answer(f"–°–ª–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {dt_local.strftime('%d %b %Y, %H:%M')} ({SLOT_MINUTES} –º–∏–Ω)")


# =========================
# Webhook server
# =========================
async def on_startup():
    if SKIP_AUTO_WEBHOOK:
        print("INFO: SKIP_AUTO_WEBHOOK=1 ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é setWebhook (–≤–µ–±—Ö—É–∫ —É–∂–µ –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é).")
        return
    if BASE_URL:
        try:
            await bot.set_webhook(url=f"{BASE_URL}/webhook", allowed_updates=["message", "callback_query"])
            print("Webhook set to", f"{BASE_URL}/webhook")
        except Exception as e:
            print("WARN: set_webhook failed:", e)

async def on_shutdown():
    try:
        await bot.delete_webhook()
    except Exception:
        pass

async def main():
    app = web.Application()
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path="/webhook")
    setup_application(app, dp, bot=bot)

    async def health_handler(request):
        return web.Response(text="ok")
    app.router.add_get("/", health_handler)

    await on_startup()
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=int(os.getenv("PORT", "8080")))
    await site.start()
    print("Webhook server started")
    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    asyncio.run(main())
